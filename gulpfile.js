const path = require('path');
const gulp = require('gulp');
const sass = require('gulp-sass');
const concat = require('gulp-concat');
const minifyCSS = require('gulp-cssmin');
const autoprefixer = require('gulp-autoprefixer');
const svgSprite = require('gulp-svg-sprite');
const svgmin = require('gulp-svgmin');
const cheerio = require('gulp-cheerio');
const fs = require('fs');

const ICONS_FOLDER = './src/components/common/Icon/svg';
const GENERATED_FILE = './src/components/common/Icon/IconType.js';
const PROJECT_ROOT = path.resolve(__dirname);

const Path = {
  SRC: path.join(PROJECT_ROOT, 'src', '**', '*.svg'),
  TEMPLATE: path.join(PROJECT_ROOT, 'src', 'components', 'common', 'Icon', 'template.html'),
  PUBLIC: path.join(PROJECT_ROOT, 'public', 'static'),
  DEST_SVG: path.join('sprite.svg'),
  DEST_SCSS: path.join('sprite.scss')
};

gulp.task('styles', function () {
  return gulp.src('src/**/*.scss')
    .pipe(sass().on('error', sass.logError))
    .pipe(autoprefixer(
      {
        browsers: ['> 1%', 'last 4 versions'],
        cascade: false
      }))
    .pipe(concat('app.css'))
    .pipe(minifyCSS())
    .pipe(gulp.dest('./src/css'));
});

gulp.task('sprite', ['icon-type'], function() {
  return gulp.src(Path.SRC)
    .pipe(svgmin({
      js2svg: { pretty: true }
    }))
    .pipe(cheerio({
      run: function ($) {
        $('[fill]').removeAttr('fill');
        $('[stroke]').removeAttr('stroke');
        $('[style]').removeAttr('style');
      },
      parserOptions: { xmlMode: true }
    }))
    .pipe(svgSprite({
      mode: {
        symbol: {
          sprite: Path.DEST_SVG,
          render: {
            scss: {
              dest: Path.DEST_SCSS,
              template: Path.TEMPLATE
            }
          }
        }
      },
      shape: {
        id: {
          generator(name, file) {
            let parsedPath = path.parse(name);
            return parsedPath.name;
          }
        }
      }
    }))
    .pipe(gulp.dest(Path.PUBLIC));
});

gulp.task('icon-type', function() {
  return new Promise((resolve, reject) => {
    fs.readdir(ICONS_FOLDER, (err, files) => {
      let iconTypes = files.map(file => file.replace('.svg', ''));
      let dictionary = iconTypes.reduce((res, cur) => {
        let key = cur.toUpperCase()
          .replace('-', '_');
        return Object.assign({ [key]: cur }, res);
      }, {});

      let fileText =
`/**
* This file autogenerated. Don't change it manually
*/
export const IconType = {
${Object.keys(dictionary)
    .map((key) => {
      return `${key} = '${dictionary[key]}'`
    })
    .join(',\n    ')
}
}
`;
      fs.writeFile(GENERATED_FILE, fileText, (err) => {
        err ? reject(err) : resolve();
      });
    })
  });
})

gulp.task('default', ['styles'], function() {
  gulp.watch('src/**/*.scss', function() {
    gulp.run('styles');
  });
});
