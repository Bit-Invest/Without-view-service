user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Cache zone configuration, allocating 10MB for storing
    # keys info in-memory and limiting total size for pages on a disk to 1GB,
    # both enough to completely cover current production needs. Pages will be
    # dropped from disk after 8 hours of inactivity, causing synchronous reload
    # for rare pages, which prevents obtaining outdated content
    # on pages with 'proxy_cache_background_update' enabled.
    proxy_cache_path /cache/nginx/ levels=1:2 keys_zone=common_cache:10m
        max_size=1g inactive=6h use_temp_path=off;

    server {
        # Listening on IPv4 for local use.
        listen 80;
        # Listening on IPv6 for incoming connections.
        listen [::]:80;

        # server_name cindex.fund;

        # Compressing configuration. Using gzip to compress all the content
        # which is longer than 1KB in total.
        gzip on;
        gzip_min_length 1024;
        gzip_buffers 4 32k;
        gzip_proxied any;
        gzip_vary on;
        # CSS, JS, JSON, HTML pages itself, also images and vector graphics.
        gzip_types text/plain image/svg+xml application/javascript
            application/x-javascript text/javascript text/xml text/css;

        # Location for serving static files. Serving js, css and fonts.
        # Despite production setup assumes
        # hash based invalidation for static files, there is no need for
        # storing old files in a browser longer than a fortnight.
        location ~ ^/(css|js|media)/ {
            autoindex off;
            access_log off;
            expires 14d;
            add_header Pragma public;
            add_header Cache-Control "public";
            root /home/cindex/build/static;
        }

        # General location for everything else apart from static.
        location / {
            # Location header is already set on the app server side.
            proxy_redirect off;

            # Set headers for proxied request
            # with useful and required info about origin request.
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            proxy_connect_timeout 3s;
            proxy_read_timeout 5s;

            # For the future support of 304 code from app server.
            proxy_cache_revalidate on;

            # When content is expired the server will respond immediately
            # with a stale version. The actual request processing occurs
            # in the background.
            proxy_cache_background_update on;

            # Do not process concurrent requests to the same page,
            # after the earliest request is done, page will be placed
            # in the cache then the others will get the result from the cache.
            proxy_cache_lock on;

            # Keep serving stale version of a page when it updating
            # or some errors occur on the server.
            proxy_cache_use_stale error timeout updating
                http_500 http_502 http_503 http_504;

            # Use defined above cache location.
            proxy_cache common_cache;

            proxy_cache_key $host$request_method$request_uri$is_args$args;

            # Do not consider Cache-Control header.
            proxy_ignore_headers Cache-Control Expires Set-Cookie;
            add_header Cache-Control
                "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
            # Mostly for cache debugging process.
            add_header X-Proxy-Cache $upstream_cache_status;

            # Page version in cache is expired after 10 minutes.
            proxy_cache_valid 200 10m;

            alias /home/cindex/build/;
            try_files $uri /index.html;
        }
    }

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}